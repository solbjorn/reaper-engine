#ifdef USE_MSAA
#define EXTEND_F_DEFFER
#endif

#include "common.h"
#include "sload.h"

f_deffer main(p_flat I)
{
    // 1. Base texture + kill pixels with low alpha
#ifndef USE_MSAA
    float4 D = tbase(I.tcdh);

    clip(D.w - def_aref);
#else // USE_MSAA
    uint mask = 0x0;
    float2 ddx_base = ddx(I.tcdh);
    float2 ddy_base = ddy(I.tcdh);

    float2 pixeloffset = MSAAOffsets[0] * (1.0 / 16.0);

    float2 texeloffset = pixeloffset.x * ddx_base + pixeloffset.y * ddy_base;

    float4 D = tbase(I.tcdh + texeloffset);

    if (D.w - def_aref >= 0)
        mask |= 0x1;

    [unroll] for (int i = 1; i < MSAA_SAMPLES; ++i)
    {
        pixeloffset = MSAAOffsets[i] * (1.0 / 16.0);
        texeloffset = pixeloffset.x * ddx_base + pixeloffset.y * ddy_base;
        float4 DI = tbase(I.tcdh + texeloffset);
        if (DI.w - def_aref >= 0)
            mask |= (uint(0x1) << i);
    }

    if (mask == 0x0)
        discard;
#endif // USE_MSAA

#ifdef USE_TDETAIL
    //	D.rgb	= 2*D.rgb*tex2D	(s_detail, I.tcdbump).rgb;
    D.rgb = 2 * D.rgb * s_detail.Sample(smp_base, I.tcdbump).rgb;
#endif

    // hemi,sun,material
    float ms = xmaterial;
#ifdef USE_LM_HEMI
    //	float4	lm 	= tex2D			(s_hemi, I.lmh);
    float4 lm = s_hemi.Sample(smp_rtlinear, I.lmh);
    //	float 	h  	= dot			(lm.rgb,1.h/3.h);
    float h = get_hemi(lm);
#else
    float h = I.position.w;
#endif

    // 2. Standart output
    float4 Ne = float4(normalize((float3)I.N.xyz), h);

    return pack_gbuffer(Ne, float4(I.position.xyz + Ne.xyz * def_virtualh / 2.f, ms), float4(D.rgb, def_gloss), EXTFMASK(mask));
}
