#ifdef USE_MSAA
#define EXTEND_F_DEFFER
#endif

#include "common.h"
#include "sload.h"

f_deffer main(p_bumped I)
{
#ifndef USE_MSAA
    surface_bumped S = sload(I);

    clip(S.base.w - def_aref);
#else // USE_MSAA
    uint mask = 0x0;

    surface_bumped S = sload(I, MSAAOffsets[0] * (1.0 / 16.0));

    if (S.base.w - def_aref >= 0)
        mask |= 0x1;

    [unroll] for (int i = 1; i < MSAA_SAMPLES; ++i)
    {
        surface_bumped SI = sload(I, MSAAOffsets[i] * (1.0 / 16.0));
        if (SI.base.w - def_aref >= 0)
            mask |= (uint(0x1) << i);
    }

    if (mask == 0x0)
        discard;
#endif // USE_MSAA

    // Sample normal, rotate it by matrix, encode position
    float3 Ne = mul(float3x3(I.M1, I.M2, I.M3), S.normal);
    Ne = normalize(Ne);

    // hemi,sun,material
    float ms = xmaterial;
#ifdef USE_LM_HEMI
    //	float4	lm 	= tex2D			(s_hemi, I.lmh);
    float4 lm = s_hemi.Sample(smp_rtlinear, I.lmh);
    // float 	h  	= dot			(lm.rgb,1.h/3.h);
    float h = get_hemi(lm);
#else
    float h = I.position.w;
#endif

    return pack_gbuffer(float4(Ne, h), float4(I.position.xyz + Ne * S.height * def_virtualh, ms), float4(S.base.x, S.base.y, S.base.z, S.gloss), EXTFMASK(mask));
}
